例えば、引数に`title`ではなく、`attractiveTitle`とするとより意図を汲み取ってくれたりします。他にも`reasoning`などを加えると、理由を出力するとともに`title`の生成結果にも作用する実感値があります。（ちゃんと検証はできていないです）
出力結果の質に影響を与えると言う観点で、Function Callingのパラメータ名や組み合わせはプロンプトエンジニアリング的な要素があるなと感じます。

### トークン上限を考慮した設計
gpt-3.5-turbo-16kを利用しているのは、文字起こしされた文章が長文となり、トークン上限数を超えてしまうの防ぐためです。ただ16kを超える場合もある気がしており、そこの対策を考えていました。
一旦の着地としては、10,000文字を超える場合は文章を20分割し、中間のチャンク（分割した塊）をランダムに取り除いて10,000文字以内に抑えています。
メモの場合、最初と最後に重要な箇所が多いと言うこともあり、この方式によって全体的な内容を汲み取ったタイトルを生成することができます。

## ✅ カテゴリへの自動分類による、整理されたメモ管理の実現
作成されたカテゴリに、自動で分類する機能です。ジャンルごとに見返したいという時もあるので、メモ内容から近いカテゴリへ自動で分類するようにしています。

### ベクトル類似度による分類
カテゴリを作成する際に、カテゴリ名の埋め込み表現（ベクトル）を取得しておき、メモ内容とカテゴリのコサイン類似度を測定しています。EmbeddingにはOpenAI社の`text-embedding-ada-002`を利用しています。
メモ内容についても、もちろんEmbeddingをしているのですが、その前にgpt-3.5-turbo-16kに、メモ内容からカテゴリ名を生成してもらっています。
類似度検索をする際には、クエリとターゲットの形式を統一した方が良いという話もあり、メモ内容（長文）とカテゴリ名（主に単語）での類似度検索は精度が悪くなる懸念があったためです。この考えはHyDEと言う手法から来ています。

## ✅ 絵文字と感情を紐づけることで、メモ一覧を見返しやすく＆楽しく
